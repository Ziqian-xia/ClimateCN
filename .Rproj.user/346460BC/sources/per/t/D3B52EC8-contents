library(tidyverse)
library(leaflet)
library(sf)
library(htmltools)

mostall%>%filter(ty==2010)->mostall2010

num_colors <- 12
# Adjusting the palette bins to handle percentages
palette <- colorBin(palette = colorRampPalette(c("#e0f3f8", "#fee090", "#d73027"))(num_colors),
                    bins = seq(min(mostall2010$ebma, na.rm = TRUE) * 100,
                               max(mostall2010$ebma, na.rm = TRUE) * 100,
                               length.out = num_colors + 1),
                    domain = mostall2010$ebma * 100)

create_label <- function(data) {
  label <- paste0("<strong>Province: </strong>", data$state,
                  "<br><strong>Percentage: </strong>", round(data$ebma * 100, 2), "%",
                  "<br><strong>Region: </strong>", data$region)
  return(label)
}


# Compute centroids of the polygons
mostall2010_centroids <- st_centroid(st_geometry(mostall2010))

# Convert centroids to a data frame and extract latitude and longitude
mostall2010_centroids_df <- data.frame(
  abbr = mostall2010$abbr,
  lng = st_coordinates(mostall2010_centroids)[, 1],
  lat = st_coordinates(mostall2010_centroids)[, 2]
)

pp2010 <- leaflet(mostall2010_simplified) %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  addPolygons(fillColor = ~palette(ebma * 100),
              fillOpacity = 0.8,
              color = "#BDBDC3",
              weight = 1,
              label = ~paste0(round(ebma * 100, 2), "%"),
              popup = ~create_label(mostall2023),
              highlightOptions = highlightOptions(color = "white", weight = 2,
                                                  bringToFront = TRUE))  %>%
  addLegend(pal = palette,
            values = ~ebma * 100,
            title = "Perceived Priority of Climate Change (%)",
            position = "bottomright",
            labFormat = labelFormat(suffix = "%")) %>%
  # Updated code to add abbreviations using centroids
  addLabelOnlyMarkers(data = mostall2010_centroids_df,
                      ~lng,
                      ~lat,
                      label = ~abbr,
                      labelOptions = labelOptions(noHide = TRUE,
                                                  textOnly = TRUE,
                                                  direction = "center",
                                                  style = list("color" = "black")))

pp2010




# Follow the example before, but now for 2023

mostall2023_simplified <- ms_simplify(mostall2023, keep = 0.05)

mostall%>%filter(ty==2023)->mostall2023

num_colors <- 12
# Adjusting the palette bins to handle percentages
palette <- colorBin(palette = colorRampPalette(c("#e0f3f8", "#fee090", "#d73027"))(num_colors),
                    bins = seq(min(mostall2023$ebma, na.rm = TRUE) * 100,
                               max(mostall2023$ebma, na.rm = TRUE) * 100,
                               length.out = num_colors + 1),
                    domain = mostall2023$ebma * 100)


create_label <- function(data) {
  label <- paste0("<strong>Province: </strong>", data$state,
                  "<br><strong>Percentage: </strong>", round(data$ebma * 100, 2), "%",
                  "<br><strong>Region: </strong>", data$region)
  return(label)
}

mostall2023_simplified<-ms_simplify(mostall2023,keep=0.05)

# Compute centroids of the polygons
mostall2023_centroids <- st_centroid(st_geometry(mostall2023))

# Convert centroids to a data frame and extract latitude and longitude
mostall2023_centroids_df <- data.frame(
  abbr = mostall2023$abbr,
  lng = st_coordinates(mostall2023_centroids)[, 1],
  lat = st_coordinates(mostall2023_centroids)[, 2]
)


pp2023<-leaflet(mostall2023_simplified) %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  addPolygons(fillColor = ~palette(ebma * 100),
              fillOpacity = 0.8,
              color = "#BDBDC3",
              weight = 1,
              label = ~paste0(round(ebma * 100, 2), "%"),
              popup = ~create_label(mostall2023),
              highlightOptions = highlightOptions(color = "white", weight = 2,
                                                  bringToFront = TRUE)) %>%
  addLegend(pal = palette,
            values = ~ebma * 100,
            title = "Perceived Priority of Climate Change (%)",
            position = "bottomright",
            labFormat = labelFormat(suffix = "%")) %>%
  # Updated code to add abbreviations using centroids
  addLabelOnlyMarkers(data = mostall2023_centroids_df,
                      ~lng,
                      ~lat,
                      label = ~abbr,
                      labelOptions = labelOptions(noHide = TRUE,
                                                  textOnly = TRUE,
                                                  direction = "center",
                                                  style = list("color" = "black")))

leaflet_map



famiall2010_simplified <- ms_simplify(famiall2010, keep = 0.05)
famiall23%>%filter(ty==2010)->famiall2010



num_colors <- 12
# Adjusting the palette bins to handle percentages
palette <- colorBin(palette = colorRampPalette(c("#e0f3f8", "#fee090", "#d73027"))(num_colors),
                    bins = seq(min(famiall2010$ebma, na.rm = TRUE) * 100,
                               max(famiall2010$ebma, na.rm = TRUE) * 100,
                               length.out = num_colors + 1),
                    domain = famiall2010$ebma * 100)


create_label <- function(data) {
  label <- paste0("<strong>Province: </strong>", data$state,
                  "<br><strong>Percentage: </strong>", round(data$ebma * 100, 2), "%",
                  "<br><strong>Region: </strong>", data$region)
  return(label)
}

famiall2010 <- st_transform(famiall2010, 4326)
# Compute centroids of the polygons
famiall2010_centroids <- st_centroid(st_geometry(famiall2010))

# Convert centroids to a data frame and extract latitude and longitude
famiall2010_centroids_df <- data.frame(
  abbr = famiall2010$abbr,
  lng = st_coordinates(famiall2010_centroids)[, 1],
  lat = st_coordinates(famiall2010_centroids)[, 2]
)


pi2010<-leaflet(famiall2010_simplified) %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  addPolygons(fillColor = ~palette(ebma * 100),
              fillOpacity = 0.8,
              color = "#BDBDC3",
              weight = 1,
              label = ~paste0(round(ebma * 100, 2), "%"),
              popup = ~create_label(mostall2023),
              highlightOptions = highlightOptions(color = "white", weight = 2,
                                                  bringToFront = TRUE)) %>%
  addLegend(pal = palette,
            values = ~ebma * 100,
            title = "Perceived Impact of Climate Change (%)",
            position = "bottomright",
            labFormat = labelFormat(suffix = "%")) %>%
  # Updated code to add abbreviations using centroids
  addLabelOnlyMarkers(data = mostall2023_centroids_df,
                      ~lng,
                      ~lat,
                      label = ~abbr,
                      labelOptions = labelOptions(noHide = TRUE,
                                                  textOnly = TRUE,
                                                  direction = "center",
                                                  style = list("color" = "black")))

save(pi2010, file = "pi2010.RData")




famiall23%>%filter(ty==2023)->famiall2023
famiall2023 <- st_transform(famiall2023, 4326)
famiall2023_simplified <- ms_simplify(famiall2023, keep = 0.05)

num_colors <- 12
# Adjusting the palette bins to handle percentages
palette <- colorBin(palette = colorRampPalette(c("#e0f3f8", "#fee090", "#d73027"))(num_colors),
                    bins = seq(min(famiall2023$ebma, na.rm = TRUE) * 100,
                               max(famiall2023$ebma, na.rm = TRUE) * 100,
                               length.out = num_colors + 1),
                    domain = famiall2023$ebma * 100)


create_label <- function(data) {
  label <- paste0("<strong>Province: </strong>", data$state,
                  "<br><strong>Percentage: </strong>", round(data$ebma * 100, 2), "%",
                  "<br><strong>Region: </strong>", data$region)
  return(label)
}

famiall2023 <- st_transform(famiall2023, 4326)
# Compute centroids of the polygons
famiall2023_centroids <- st_centroid(st_geometry(famiall2023))

# Convert centroids to a data frame and extract latitude and longitude
famiall2023_centroids_df <- data.frame(
  abbr = famiall2010$abbr,
  lng = st_coordinates(famiall2023_centroids)[, 1],
  lat = st_coordinates(famiall2023_centroids)[, 2]
)


pi2023<-leaflet(famiall2023_simplified) %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  addPolygons(fillColor = ~palette(ebma * 100),
              fillOpacity = 0.8,
              color = "#BDBDC3",
              weight = 1,
              label = ~paste0(round(ebma * 100, 2), "%"),
              popup = ~create_label(mostall2023),
              highlightOptions = highlightOptions(color = "white", weight = 2,
                                                  bringToFront = TRUE)) %>%
  addLegend(pal = palette,
            values = ~ebma * 100,
            title = "Perceived Impact of Climate Change (%)",
            position = "bottomright",
            labFormat = labelFormat(suffix = "%")) %>%
  # Updated code to add abbreviations using centroids
  addLabelOnlyMarkers(data = famiall2023_centroids_df,
                      ~lng,
                      ~lat,
                      label = ~abbr,
                      labelOptions = labelOptions(noHide = TRUE,
                                                  textOnly = TRUE,
                                                  direction = "center",
                                                  style = list("color" = "black")))

save(pi2023, file = "pi2023.RData")
# Follow the example before, but now for cities level (mapdata1)

# add a column in the mapdata1 dataset with inner join with citytrs

left_join(mapdata1,citytrs,by=c("市"="city"))->mapdata1
left_join(mapdata2,citytrs,by=c("市"="city"))->mapdata2



######################################################################
# Follow the example before, but now for city level map

mapdata2 <- st_transform(mapdata2, crs = 4326)
mapdata2_simplified <- ms_simplify(mapdata2, keep = 0.05)
# Convert mrp to a factor variable with 10 levels
mapdata2$mrp_bin <- cut(mapdata2$mrp, breaks = seq(min(mapdata2$mrp, na.rm = TRUE), max(mapdata2$mrp, na.rm = TRUE), length.out = 11), include.lowest = TRUE, labels = FALSE)

# Generate custom labels
label_list <- round(seq(min(mapdata2$mrp, na.rm = TRUE), max(mapdata2$mrp, na.rm = TRUE), length.out = 10), 2)
label_list <- paste0(label_list*100, "%")




# Color palette
num_colors <- 12
palette <- colorBin(palette = colorRampPalette(c("#ffffff","#de2d26"))(num_colors),
                    bins = round(seq((min(mapdata2$mrp, na.rm = TRUE)-0.01) * 100,
                                     (max(mapdata2$mrp, na.rm = TRUE)+0.01) * 100,
                                     length.out = num_colors + 1),2),
                    domain = mapdata2$mrp * 100)


create_label0 <- function(data) {
  label <- paste0("<strong>Province: </strong>", data$name,
                  "<br><strong>Percentage: </strong>", round(data$mrp * 100, 2), "%")
  return(label)
}


cpi2023<-leaflet(mapdata2_simplified) %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  addPolygons(fillColor = ~palette(mrp * 100),
              fillOpacity = 0.8,
              color = "#BDBDC3",
              weight = 1,
              label = ~paste0(round(mrp * 100, 2), "%"),
              highlightOptions = highlightOptions(color = "white", weight = 2,
                                                  bringToFront = TRUE),
              popup = ~create_label0(mapdata2)) %>%
  addLegend(pal = palette,
            values = ~mrp * 100,
            title = "Perceived Impact (%)",
            position = "bottomright",
            labFormat = labelFormat(suffix = "%"))%>%
  addControl(
    html = "<div style='font-size:18px; font-weight:bold;'>Perceived Impact of Climate Change (city-level)</div>",
    position = "bottomleft"
  )

leaflet_map


######## Perceived Priority of Climate Change City Level

# Follow the example before, but now for city level map

mapdata1 <- st_transform(mapdata1, crs = 4326)
mapdata1_simplified <- ms_simplify(mapdata1, keep = 0.05)
# Convert mrp to a factor variable with 10 levels
mapdata1$mrp_bin <- cut(mapdata1$mrp, breaks = seq(min(mapdata1$mrp, na.rm = TRUE), max(mapdata1$mrp, na.rm = TRUE), length.out = 11), include.lowest = TRUE, labels = FALSE)

# Generate custom labels
label_list <- round(seq(min(mapdata1$mrp, na.rm = TRUE), max(mapdata1$mrp, na.rm = TRUE), length.out = 10), 2)
label_list <- paste0(label_list*100, "%")




# Color palette
num_colors <- 12
palette <- colorBin(palette = colorRampPalette(c("#ffffff","#076585"))(num_colors),
                    bins = round(seq((min(mapdata1$mrp, na.rm = TRUE)-0.01) * 100,
                               (max(mapdata1$mrp, na.rm = TRUE)+0.01) * 100,
                               length.out = num_colors + 1),2),
                    domain = mapdata2$mrp * 100)


create_label0 <- function(data) {
  label <- paste0("<strong>Province: </strong>", data$name,
                  "<br><strong>Percentage: </strong>", round(data$mrp * 100, 2), "%")
  return(label)
}


cpp2023<-leaflet(mapdata1_simplified) %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  addPolygons(fillColor = ~palette(mrp * 100),
              fillOpacity = 0.8,
              color = "#BDBDC3",
              weight = 1,
              label = ~paste0(round(mrp * 100, 2), "%"),
              highlightOptions = highlightOptions(color = "white", weight = 2,
                                                  bringToFront = TRUE),
              popup = ~create_label0(mapdata2)) %>%
  addLegend(pal = palette,
            values = ~mrp * 100,
            title = "Perceived Priority (%)",
            position = "bottomright",
            labFormat = labelFormat(suffix = "%"))%>%
  addControl(
    html = "<div style='font-size:18px; font-weight:bold;'>Perceived Priority of Climate Change (city-level)</div>",
    position = "bottomleft"
  )

#####################

save(pi2023, file = "pi2023.RData")
save(pp2023, file = "pp2023.RData")
save(pi2010, file = "pi2010.RData")
save(pp2010, file = "pp2010.RData")
save(cpi2023, file = "cpi2023.RData")
save(cpp2023, file = "cpp2023.RData")
